{
  "address": "0xD72e7aB90d97923249F2cdF78Ef68534A6117881",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_mockUSDTAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Fallback",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "shipmentId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "enum Dchain.PaymentType",
          "name": "paymentType",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "PaymentMade",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "shipmentId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "PaymentReleased",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Received",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "enum Dchain.ShipmentType",
          "name": "shipmentType",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "origin",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "destination",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "supplier",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "ShipmentCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "shipmentId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "paymentId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "enum Dchain.ShipmentType",
          "name": "shipmentType",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "enum Dchain.ShipmentStatus",
          "name": "status",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "updatedBy",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "StatusUpdated",
      "type": "event"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "MOCKUSDT_ADDRESS",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "enum Dchain.ShipmentType",
              "name": "shipmentType",
              "type": "uint8"
            },
            {
              "internalType": "string",
              "name": "origin",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "destination",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "supplier",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "transporter",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "retailer",
              "type": "address"
            },
            {
              "internalType": "enum Dchain.PaymentType",
              "name": "paymentType",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "data",
              "type": "bytes32"
            }
          ],
          "internalType": "struct Dchain.ShipmentDetails",
          "name": "details",
          "type": "tuple"
        }
      ],
      "name": "createShipment",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_shipmentId",
          "type": "uint256"
        }
      ],
      "name": "handlePayment",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mockUSDT",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paymentCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "payments",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "shipmentId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "enum Dchain.PaymentStatus",
          "name": "status",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "privateShipmentCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_shipmentId",
          "type": "uint256"
        }
      ],
      "name": "releasePayment",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "shipmentCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "shipments",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "paymentId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "origin",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "destination",
          "type": "string"
        },
        {
          "internalType": "enum Dchain.ShipmentStatus",
          "name": "status",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "supplier",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "transporter",
          "type": "address"
        },
        {
          "internalType": "enum Dchain.PaymentType",
          "name": "paymentType",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "retailer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "enum Dchain.ShipmentType",
          "name": "shipmentType",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "data",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_shipmentId",
          "type": "uint256"
        },
        {
          "internalType": "enum Dchain.ShipmentStatus",
          "name": "_status",
          "type": "uint8"
        }
      ],
      "name": "updateStatus",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x75def73ea197768f044794886df2a9819848afa17e253ce04d2fe79760385c2c",
  "receipt": {
    "to": null,
    "from": "0x612Dfa9fF8d6D19eff48A78D2827aC5a8F138596",
    "contractAddress": "0xDe83458eF3dCfeD8C5e02abc75d7927d9aA5213a",
    "transactionIndex": 1,
    "gasUsed": "1545704",
    "logsBloom": "0x
    "blockHash": "0xe8fa4f8386640aab2fb33c12c553d55d59e84784fa7d5e969828e94a354cc355",
    "transactionHash": "0x75def73ea197768f044794886df2a9819848afa17e253ce04d2fe79760385c2c",
    "logs": [],
    "blockNumber": 10067805,
    "cumulativeGasUsed": "1589591",
    "status": 1,
    "byzantium": true
  },
  "args": ["0xE7c86A836560f49f07F00674fF3c834aac3584D2"],
  "numDeployments": 3,
  "solcInputHash": "56094a765675ec15f346f50727c8a3a1",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_mockUSDTAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Fallback\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shipmentId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum Dchain.PaymentType\",\"name\":\"paymentType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"PaymentMade\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shipmentId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"PaymentReleased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Received\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum Dchain.ShipmentType\",\"name\":\"shipmentType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"origin\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"destination\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"supplier\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"ShipmentCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shipmentId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"paymentId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum Dchain.ShipmentType\",\"name\":\"shipmentType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"enum Dchain.ShipmentStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"updatedBy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"StatusUpdated\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"MOCKUSDT_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"enum Dchain.ShipmentType\",\"name\":\"shipmentType\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"origin\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"destination\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"supplier\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"transporter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"retailer\",\"type\":\"address\"},{\"internalType\":\"enum Dchain.PaymentType\",\"name\":\"paymentType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"data\",\"type\":\"bytes32\"}],\"internalType\":\"struct Dchain.ShipmentDetails\",\"name\":\"details\",\"type\":\"tuple\"}],\"name\":\"createShipment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_shipmentId\",\"type\":\"uint256\"}],\"name\":\"handlePayment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mockUSDT\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paymentCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"payments\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"shipmentId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"enum Dchain.PaymentStatus\",\"name\":\"status\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"privateShipmentCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_shipmentId\",\"type\":\"uint256\"}],\"name\":\"releasePayment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shipmentCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"shipments\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"paymentId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"origin\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"destination\",\"type\":\"string\"},{\"internalType\":\"enum Dchain.ShipmentStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"supplier\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"transporter\",\"type\":\"address\"},{\"internalType\":\"enum Dchain.PaymentType\",\"name\":\"paymentType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"retailer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"enum Dchain.ShipmentType\",\"name\":\"shipmentType\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"data\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_shipmentId\",\"type\":\"uint256\"},{\"internalType\":\"enum Dchain.ShipmentStatus\",\"name\":\"_status\",\"type\":\"uint8\"}],\"name\":\"updateStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Dchain.sol\":\"Dchain\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x4ffc0547c02ad22925310c585c0f166f8759e2648a09e9b489100c42f15dd98d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/Dchain.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./mockUSDT.sol\\\"; // Assuming mockUSDT.sol contains the ERC20 implementation\\n\\ncontract Dchain {\\n    address public MOCKUSDT_ADDRESS;\\n    IERC20 public mockUSDT;\\n\\n    struct ShipmentDetails {\\n        ShipmentType shipmentType;\\n        string origin;\\n        string destination;\\n        address supplier;\\n        address transporter;\\n        address retailer;\\n        PaymentType paymentType;\\n        uint256 amount;\\n        bytes32 data;\\n    }\\n\\n    struct Shipment {\\n        uint256 id;\\n        uint256 paymentId;\\n        string origin;\\n        string destination;\\n        ShipmentStatus status;\\n        address supplier;\\n        address transporter;\\n        PaymentType paymentType;\\n        address retailer;\\n        uint256 amount;\\n        ShipmentType shipmentType;\\n        bytes32 data;\\n    }\\n\\n    enum ShipmentStatus { Created, InTransit, Completed }\\n    enum PaymentType { Escrowed, Preship, Postship }\\n    enum PaymentStatus { Escrowed, Pending, Completed }\\n    enum ShipmentType { Public, Private }\\n\\n    struct Payment {\\n        uint256 id;\\n        uint256 shipmentId;\\n        uint256 amount;\\n        PaymentStatus status;\\n    }\\n\\n    // Mappings to store shipments and payments\\n    mapping(uint256 => Shipment) public shipments;\\n    mapping(uint256 => Payment) public payments;\\n\\n    // Counters for Shipment and Payment IDs\\n    uint256 public shipmentCount = 0;\\n    uint256 public privateShipmentCount = 0;\\n    uint256 public paymentCount = 0;\\n\\n    // Events\\n    event ShipmentCreated(uint256 id, ShipmentType shipmentType, string origin, string destination, address supplier, uint256 amount, uint256 timestamp);\\n    event StatusUpdated(uint256 shipmentId, uint256 paymentId, ShipmentType shipmentType, ShipmentStatus status, address updatedBy, uint256 timestamp);\\n    event PaymentMade(uint256 shipmentId, PaymentType paymentType, uint256 amount, address to, uint256 timestamp);\\n    event PaymentReleased(uint256 shipmentId, uint256 amount, address to, uint256 timestamp);\\n    event Received(address sender, uint256 amount);\\n    event Fallback(address sender, uint256 amount);\\n\\n    constructor(address _mockUSDTAddress) {\\n        MOCKUSDT_ADDRESS = _mockUSDTAddress;\\n        mockUSDT = IERC20(_mockUSDTAddress);\\n    }\\n\\n    // Modifiers\\n    modifier isValidShipment(ShipmentType shipmentType, string memory _origin, string memory _destination, address _supplier, address _transporter, address _retailer, bytes32 _data) {\\n        require(_transporter != address(0), \\\"Transporter is required\\\");\\n        require(_retailer != address(0), \\\"Retailer is required\\\");\\n        require(_supplier != address(0), \\\"Supplier is required\\\");\\n        if (shipmentType == ShipmentType.Public) {\\n            require(bytes(_origin).length > 0, \\\"Origin is required\\\");\\n            require(bytes(_destination).length > 0, \\\"Destination is required\\\");\\n        } else {\\n            require(_data != bytes32(0), \\\"Data is required\\\");\\n            require(bytes(_destination).length == 0, \\\"Destination must be empty\\\");\\n            require(bytes(_origin).length == 0, \\\"Origin must be empty\\\");\\n        }\\n        _;\\n    }\\n\\n    // Payment Functions\\n    function handlePayment(uint256 _shipmentId) external {\\n        Shipment storage shipment = shipments[_shipmentId];\\n        require(mockUSDT.balanceOf(msg.sender) >= shipment.amount, \\\"Insufficient MockUSDT balance\\\"); // Ensure sufficient balance\\n\\n        paymentCount++;\\n\\n        if (shipment.paymentType == PaymentType.Preship || shipment.paymentType == PaymentType.Postship) {\\n            require(mockUSDT.transferFrom(msg.sender, shipment.supplier, shipment.amount), \\\"MockUSDT transfer failed\\\");\\n            payments[paymentCount] = Payment(paymentCount, shipment.id, shipment.amount, PaymentStatus.Completed);\\n        }\\n        if (shipment.paymentType == PaymentType.Escrowed) {\\n            require(mockUSDT.transferFrom(msg.sender, address(this), shipment.amount), \\\"MockUSDT transfer to escrow failed\\\");\\n            payments[paymentCount] = Payment(paymentCount, shipment.id, shipment.amount, PaymentStatus.Escrowed);\\n        }\\n        \\n        shipment.paymentId = paymentCount;\\n        emit PaymentMade(_shipmentId, shipment.paymentType, shipment.amount, shipment.supplier, block.timestamp);\\n    }\\n\\n    function releasePayment(uint256 _shipmentId) external {\\n        Shipment storage shipment = shipments[_shipmentId];\\n        Payment storage payment = payments[shipment.paymentId];\\n        require(shipment.paymentType == PaymentType.Escrowed, \\\"Payment type is not escrowed\\\");\\n        require(payment.status != PaymentStatus.Completed, \\\"Payment already released\\\");\\n\\n        // Transfer MockUSDT funds to the supplier\\n        require(mockUSDT.transfer(shipment.supplier, shipment.amount), \\\"MockUSDT transfer failed\\\");\\n\\n        payment.status = PaymentStatus.Completed;\\n\\n        emit PaymentReleased(_shipmentId, shipment.amount, shipment.retailer, block.timestamp);\\n    }\\n\\n    // Public Shipment Functions\\n    function createShipment(ShipmentDetails memory details)\\n        isValidShipment(details.shipmentType, details.origin, details.destination, details.supplier, details.transporter, details.retailer, details.data)\\n        public\\n    {\\n        shipmentCount++;\\n\\n        shipments[shipmentCount] = Shipment(\\n            shipmentCount,\\n            0,\\n            details.origin,\\n            details.destination,\\n            ShipmentStatus.Created,\\n            msg.sender,\\n            details.transporter,\\n            details.paymentType,\\n            details.retailer,\\n            details.amount,\\n            details.shipmentType,\\n            details.data\\n        );\\n\\n        emit ShipmentCreated(shipmentCount, details.shipmentType, details.origin, details.destination, msg.sender, details.amount, block.timestamp);\\n    }\\n\\n    function updateStatus(uint256 _shipmentId, ShipmentStatus _status) public {\\n        require(_shipmentId > 0 && _shipmentId <= shipmentCount, \\\"Shipment does not exist\\\");\\n        Shipment storage shipment = shipments[_shipmentId];\\n        Payment storage payment = payments[shipment.paymentId];\\n\\n        require(msg.sender == shipment.supplier || msg.sender == shipment.transporter, \\\"Not authorized\\\");\\n\\n        if (_status == ShipmentStatus.Completed) {\\n            require(payment.status == PaymentStatus.Completed, \\\"Payment not completed yet\\\");\\n        }\\n        if (_status == ShipmentStatus.InTransit && shipment.paymentType == PaymentType.Escrowed) {\\n            require(payment.status == PaymentStatus.Escrowed, \\\"Payment not escrowed yet\\\");\\n        }\\n        if (_status == ShipmentStatus.InTransit && shipment.paymentType == PaymentType.Preship) {\\n            require(payment.status == PaymentStatus.Completed, \\\"Preship payment not completed\\\");\\n        }\\n        shipment.status = _status;\\n        emit StatusUpdated(_shipmentId, payment.id, shipment.shipmentType, _status, msg.sender, block.timestamp);\\n    }\\n\\n    receive() external payable {\\n        emit Received(msg.sender, msg.value);\\n    }\\n\\n    fallback() external payable {\\n        emit Fallback(msg.sender, msg.value);\\n    }\\n}\\n\",\"keccak256\":\"0xf4e438480338c43d2d85baee4f5329de62d58ccc7db9a2588aab55afd6e05208\",\"license\":\"MIT\"},\"contracts/mockUSDT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract MockUSDT is ERC20, Ownable {\\n    function decimals() public view virtual override returns (uint8) {\\n        return 6;\\n    }\\n    constructor() ERC20(\\\"mockUSDT\\\", \\\"MUSDT\\\")  {\\n        _mint(msg.sender, 1000 * 10 ** decimals());\\n    }\\n\\n\\n    function mint() public {\\n        _mint(msg.sender, 1000 * 10 ** decimals());\\n    }\\n}\",\"keccak256\":\"0xd91236e3ffbd322a80c50bb4d2892d279cb60f4bd733be7a0b4105281dc60a3f\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x6080604052600436106100a05760003560e01c806387d817891161006457806387d81789146101d857806388685cd91461022f57806399576c7f1461024f578063aace20b714610265578063d1d54c051461027b578063fcd0bc8d146102b3576100e0565b80630937e68a146101155780632ac08a931461013e5780633a1b3d311461017657806365c550cb1461019857806370594b7c146101b8576100e0565b366100e057604080513381523460208201527f88a5966d370b9919b20f3e2c13ff65706f196a4e32cc2c12bf57088f8852587491015b60405180910390a1005b604080513381523460208201527ffbf15a1bae5e021d024841007b692b167afd2a281a4ff0b44f47387eb388205c91016100d6565b34801561012157600080fd5b5061012b60065481565b6040519081526020015b60405180910390f35b34801561014a57600080fd5b5061015e61015936600461138c565b6102d3565b6040516101359c9b9a99989796959493929190611428565b34801561018257600080fd5b506101966101913660046114ea565b61045a565b005b3480156101a457600080fd5b506101966101b336600461138c565b610798565b3480156101c457600080fd5b506101966101d336600461160d565b610c37565b3480156101e457600080fd5b5061021f6101f336600461138c565b600360208190526000918252604090912080546001820154600283015492909301549092919060ff1684565b604051610135949392919061170b565b34801561023b57600080fd5b5061019661024a36600461138c565b611159565b34801561025b57600080fd5b5061012b60055481565b34801561027157600080fd5b5061012b60045481565b34801561028757600080fd5b5060005461029b906001600160a01b031681565b6040516001600160a01b039091168152602001610135565b3480156102bf57600080fd5b5060015461029b906001600160a01b031681565b6002602081905260009182526040909120805460018201549282018054919392916102fd90611738565b80601f016020809104026020016040519081016040528092919081815260200182805461032990611738565b80156103765780601f1061034b57610100808354040283529160200191610376565b820191906000526020600020905b81548152906001019060200180831161035957829003601f168201915b50505050509080600301805461038b90611738565b80601f01602080910402602001604051908101604052809291908181526020018280546103b790611738565b80156104045780601f106103d957610100808354040283529160200191610404565b820191906000526020600020905b8154815290600101906020018083116103e757829003601f168201915b5050505060048301546005840154600685015460078601546008870154600990970154959660ff808616976101009096046001600160a01b03908116975080861696600160a01b9096048216959416939116908c565b60008211801561046c57506004548211155b6104bd5760405162461bcd60e51b815260206004820152601760248201527f536869706d656e7420646f6573206e6f7420657869737400000000000000000060448201526064015b60405180910390fd5b6000828152600260209081526040808320600181015484526003909252909120600482015461010090046001600160a01b0316331480610509575060058201546001600160a01b031633145b6105465760405162461bcd60e51b815260206004820152600e60248201526d139bdd08185d5d1a1bdc9a5e995960921b60448201526064016104b4565b600283600281111561055a5761055a6113eb565b036105c7576002600382015460ff16600281111561057a5761057a6113eb565b146105c75760405162461bcd60e51b815260206004820152601960248201527f5061796d656e74206e6f7420636f6d706c65746564207965740000000000000060448201526064016104b4565b60018360028111156105db576105db6113eb565b148015610607575060006005830154600160a01b900460ff166002811115610605576106056113eb565b145b15610674576000600382015460ff166002811115610627576106276113eb565b146106745760405162461bcd60e51b815260206004820152601860248201527f5061796d656e74206e6f7420657363726f77656420796574000000000000000060448201526064016104b4565b6001836002811115610688576106886113eb565b1480156106b4575060016005830154600160a01b900460ff1660028111156106b2576106b26113eb565b145b15610721576002600382015460ff1660028111156106d4576106d46113eb565b146107215760405162461bcd60e51b815260206004820152601d60248201527f50726573686970207061796d656e74206e6f7420636f6d706c6574656400000060448201526064016104b4565b60048201805484919060ff19166001836002811115610742576107426113eb565b0217905550805460088301546040517f2e1ddf97473bd2c82602d05940cc2b3be62c6ab700716120aedc60d189ad5c1e9261078a92889260ff90911690889033904290611772565b60405180910390a150505050565b60008181526002602052604090819020600781015460015492516370a0823160e01b8152336004820152919290916001600160a01b03909116906370a0823190602401602060405180830381865afa1580156107f8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061081c91906117bc565b101561086a5760405162461bcd60e51b815260206004820152601d60248201527f496e73756666696369656e74204d6f636b555344542062616c616e636500000060448201526064016104b4565b6006805490600061087a836117d5565b90915550600190506005820154600160a01b900460ff1660028111156108a2576108a26113eb565b14806108cd575060026005820154600160a01b900460ff1660028111156108cb576108cb6113eb565b145b15610a365760015460048281015460078401546040516323b872dd60e01b815233938101939093526001600160a01b03610100909204821660248401526044830152909116906323b872dd906064016020604051808303816000875af115801561093b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061095f91906117fc565b6109a65760405162461bcd60e51b8152602060048201526018602482015277135bd8dad554d115081d1c985b9cd9995c8819985a5b195960421b60448201526064016104b4565b6040805160808101825260065481528254602082015260078301549181019190915260608101600281525060036000600654815260200190815260200160002060008201518160000155602082015181600101556040820151816002015560608201518160030160006101000a81548160ff02191690836002811115610a2e57610a2e6113eb565b021790555050505b60006005820154600160a01b900460ff166002811115610a5857610a586113eb565b03610bc55760015460078201546040516323b872dd60e01b815233600482015230602482015260448101919091526001600160a01b03909116906323b872dd906064016020604051808303816000875af1158015610aba573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ade91906117fc565b610b355760405162461bcd60e51b815260206004820152602260248201527f4d6f636b55534454207472616e7366657220746f20657363726f77206661696c604482015261195960f21b60648201526084016104b4565b6040805160808101825260065481528254602082015260078301549181019190915260608101600081525060036000600654815260200190815260200160002060008201518160000155602082015181600101556040820151816002015560608201518160030160006101000a81548160ff02191690836002811115610bbd57610bbd6113eb565b021790555050505b60065460018201556005810154600782015460048301546040517f24915b72ad084019ed9372d0eff9d14d97a5dec8840727a50c58a3f11d5b9afa93610c2b938793600160a01b90920460ff1692909161010090046001600160a01b0316904290611825565b60405180910390a15050565b8051602082015160408301516060840151608085015160a08601516101008701516001600160a01b038316610cae5760405162461bcd60e51b815260206004820152601760248201527f5472616e73706f7274657220697320726571756972656400000000000000000060448201526064016104b4565b6001600160a01b038216610cfb5760405162461bcd60e51b815260206004820152601460248201527314995d185a5b195c881a5cc81c995c5d5a5c995960621b60448201526064016104b4565b6001600160a01b038416610d485760405162461bcd60e51b815260206004820152601460248201527314dd5c1c1b1a595c881a5cc81c995c5d5a5c995960621b60448201526064016104b4565b6000876001811115610d5c57610d5c6113eb565b03610dfd576000865111610da75760405162461bcd60e51b815260206004820152601260248201527113dc9a59da5b881a5cc81c995c5d5a5c995960721b60448201526064016104b4565b6000855111610df85760405162461bcd60e51b815260206004820152601760248201527f44657374696e6174696f6e20697320726571756972656400000000000000000060448201526064016104b4565b610ed2565b80610e3d5760405162461bcd60e51b815260206004820152601060248201526f11185d18481a5cc81c995c5d5a5c995960821b60448201526064016104b4565b845115610e8c5760405162461bcd60e51b815260206004820152601960248201527f44657374696e6174696f6e206d75737420626520656d7074790000000000000060448201526064016104b4565b855115610ed25760405162461bcd60e51b81526020600482015260146024820152734f726967696e206d75737420626520656d70747960601b60448201526064016104b4565b60048054906000610ee2836117d5565b9190505550604051806101800160405280600454815260200160008152602001896020015181526020018960400151815260200160006002811115610f2957610f296113eb565b8152602001336001600160a01b0316815260200189608001516001600160a01b031681526020018960c001516002811115610f6657610f666113eb565b81526020018960a001516001600160a01b031681526020018960e00151815260200189600001516001811115610f9e57610f9e6113eb565b81526101008a015160209182015260045460009081526002808352604091829020845181559284015160018401559083015190820190610fde90826118b0565b5060608201516003820190610ff390826118b0565b50608082015160048201805460ff19166001836002811115611017576110176113eb565b021790555060a08201516004820180546001600160a01b0392831661010002610100600160a81b031990911617905560c0830151600583018054919092166001600160a01b031982168117835560e085015192916001600160a81b03191617600160a01b83600281111561108d5761108d6113eb565b02179055506101008201516006820180546001600160a01b0319166001600160a01b03909216919091179055610120820151600782015561014082015160088201805460ff1916600183818111156110e7576110e76113eb565b021790555061016082015181600901559050507fb9ad0353615ea8b78297d62c728a1cde13dbed7e1e655992b7ddc80fba0dff4560045489600001518a602001518b60400151338d60e00151426040516111479796959493929190611970565b60405180910390a15050505050505050565b6000818152600260209081526040808320600181015484526003909252822090916005830154600160a01b900460ff16600281111561119a5761119a6113eb565b146111e75760405162461bcd60e51b815260206004820152601c60248201527f5061796d656e742074797065206973206e6f7420657363726f7765640000000060448201526064016104b4565b6002600382015460ff166002811115611202576112026113eb565b0361124f5760405162461bcd60e51b815260206004820152601860248201527f5061796d656e7420616c72656164792072656c6561736564000000000000000060448201526064016104b4565b600154600483810154600785015460405163a9059cbb60e01b81526101009092046001600160a01b0390811693830193909352602482015291169063a9059cbb906044016020604051808303816000875af11580156112b2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112d691906117fc565b61131d5760405162461bcd60e51b8152602060048201526018602482015277135bd8dad554d115081d1c985b9cd9995c8819985a5b195960421b60448201526064016104b4565b60038101805460ff19166002179055600782015460068301546040805186815260208101939093526001600160a01b03909116908201524260608201527f9ba01c1cf20940d4ad9b32173c4bd46bf426aae91b6cb420123d2aa5e2b76c6f9060800160405180910390a1505050565b60006020828403121561139e57600080fd5b5035919050565b6000815180845260005b818110156113cb576020818501810151868301820152016113af565b506000602082860101526020601f19601f83011685010191505092915050565b634e487b7160e01b600052602160045260246000fd5b60038110611411576114116113eb565b50565b60028110611424576114246113eb565b9052565b60006101808e83528d60208401528060408401526114488184018e6113a5565b9050828103606084015261145c818d6113a5565b9150506114688a611401565b608082018a90526001600160a01b0389811660a084015288811660c084015261149088611401565b8760e084015280871661010084015250846101208301526114b5610140830185611414565b826101608301529d9c50505050505050505050505050565b6003811061141157600080fd5b80356114e5816114cd565b919050565b600080604083850312156114fd57600080fd5b82359150602083013561150f816114cd565b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b604051610120810167ffffffffffffffff811182821017156115545761155461151a565b60405290565b8035600281106114e557600080fd5b600082601f83011261157a57600080fd5b813567ffffffffffffffff808211156115955761159561151a565b604051601f8301601f19908116603f011681019082821181831017156115bd576115bd61151a565b816040528381528660208588010111156115d657600080fd5b836020870160208301376000602085830101528094505050505092915050565b80356001600160a01b03811681146114e557600080fd5b60006020828403121561161f57600080fd5b813567ffffffffffffffff8082111561163757600080fd5b90830190610120828603121561164c57600080fd5b611654611530565b61165d8361155a565b815260208301358281111561167157600080fd5b61167d87828601611569565b60208301525060408301358281111561169557600080fd5b6116a187828601611569565b6040830152506116b3606084016115f6565b60608201526116c4608084016115f6565b60808201526116d560a084016115f6565b60a08201526116e660c084016114da565b60c082015260e083810135908201526101009283013592810192909252509392505050565b84815260208101849052604081018390526080810161172983611401565b82606083015295945050505050565b600181811c9082168061174c57607f821691505b60208210810361176c57634e487b7160e01b600052602260045260246000fd5b50919050565b8681526020810186905260c0810161178d6040830187611414565b61179685611401565b60608201949094526001600160a01b0392909216608083015260a0909101529392505050565b6000602082840312156117ce57600080fd5b5051919050565b6000600182016117f557634e487b7160e01b600052601160045260246000fd5b5060010190565b60006020828403121561180e57600080fd5b8151801515811461181e57600080fd5b9392505050565b85815260a0810161183586611401565b602082019590955260408101939093526001600160a01b03919091166060830152608090910152919050565b601f8211156118ab57600081815260208120601f850160051c810160208610156118885750805b601f850160051c820191505b818110156118a757828155600101611894565b5050505b505050565b815167ffffffffffffffff8111156118ca576118ca61151a565b6118de816118d88454611738565b84611861565b602080601f83116001811461191357600084156118fb5750858301515b600019600386901b1c1916600185901b1785556118a7565b600085815260208120601f198616915b8281101561194257888601518255948401946001909101908401611923565b50858210156119605787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b8781526119806020820188611414565b60e06040820152600061199660e08301886113a5565b82810360608401526119a881886113a5565b6001600160a01b03969096166080840152505060a081019290925260c09091015294935050505056fea26469706673582212207ddb20f989fe31eebab773763d51ff130aa379158f72c50f4a49d15d7a4bc08e64736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 868,
        "contract": "contracts/Dchain.sol:Dchain",
        "label": "MOCKUSDT_ADDRESS",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 871,
        "contract": "contracts/Dchain.sol:Dchain",
        "label": "mockUSDT",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IERC20)777"
      },
      {
        "astId": 950,
        "contract": "contracts/Dchain.sol:Dchain",
        "label": "shipments",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_struct(Shipment)920_storage)"
      },
      {
        "astId": 955,
        "contract": "contracts/Dchain.sol:Dchain",
        "label": "payments",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_struct(Payment)945_storage)"
      },
      {
        "astId": 958,
        "contract": "contracts/Dchain.sol:Dchain",
        "label": "shipmentCount",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 961,
        "contract": "contracts/Dchain.sol:Dchain",
        "label": "privateShipmentCount",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 964,
        "contract": "contracts/Dchain.sol:Dchain",
        "label": "paymentCount",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IERC20)777": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_enum(PaymentStatus)932": {
        "encoding": "inplace",
        "label": "enum Dchain.PaymentStatus",
        "numberOfBytes": "1"
      },
      "t_enum(PaymentType)928": {
        "encoding": "inplace",
        "label": "enum Dchain.PaymentType",
        "numberOfBytes": "1"
      },
      "t_enum(ShipmentStatus)924": {
        "encoding": "inplace",
        "label": "enum Dchain.ShipmentStatus",
        "numberOfBytes": "1"
      },
      "t_enum(ShipmentType)935": {
        "encoding": "inplace",
        "label": "enum Dchain.ShipmentType",
        "numberOfBytes": "1"
      },
      "t_mapping(t_uint256,t_struct(Payment)945_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Dchain.Payment)",
        "numberOfBytes": "32",
        "value": "t_struct(Payment)945_storage"
      },
      "t_mapping(t_uint256,t_struct(Shipment)920_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Dchain.Shipment)",
        "numberOfBytes": "32",
        "value": "t_struct(Shipment)920_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Payment)945_storage": {
        "encoding": "inplace",
        "label": "struct Dchain.Payment",
        "members": [
          {
            "astId": 937,
            "contract": "contracts/Dchain.sol:Dchain",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 939,
            "contract": "contracts/Dchain.sol:Dchain",
            "label": "shipmentId",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 941,
            "contract": "contracts/Dchain.sol:Dchain",
            "label": "amount",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 944,
            "contract": "contracts/Dchain.sol:Dchain",
            "label": "status",
            "offset": 0,
            "slot": "3",
            "type": "t_enum(PaymentStatus)932"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(Shipment)920_storage": {
        "encoding": "inplace",
        "label": "struct Dchain.Shipment",
        "members": [
          {
            "astId": 894,
            "contract": "contracts/Dchain.sol:Dchain",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 896,
            "contract": "contracts/Dchain.sol:Dchain",
            "label": "paymentId",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 898,
            "contract": "contracts/Dchain.sol:Dchain",
            "label": "origin",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 900,
            "contract": "contracts/Dchain.sol:Dchain",
            "label": "destination",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          },
          {
            "astId": 903,
            "contract": "contracts/Dchain.sol:Dchain",
            "label": "status",
            "offset": 0,
            "slot": "4",
            "type": "t_enum(ShipmentStatus)924"
          },
          {
            "astId": 905,
            "contract": "contracts/Dchain.sol:Dchain",
            "label": "supplier",
            "offset": 1,
            "slot": "4",
            "type": "t_address"
          },
          {
            "astId": 907,
            "contract": "contracts/Dchain.sol:Dchain",
            "label": "transporter",
            "offset": 0,
            "slot": "5",
            "type": "t_address"
          },
          {
            "astId": 910,
            "contract": "contracts/Dchain.sol:Dchain",
            "label": "paymentType",
            "offset": 20,
            "slot": "5",
            "type": "t_enum(PaymentType)928"
          },
          {
            "astId": 912,
            "contract": "contracts/Dchain.sol:Dchain",
            "label": "retailer",
            "offset": 0,
            "slot": "6",
            "type": "t_address"
          },
          {
            "astId": 914,
            "contract": "contracts/Dchain.sol:Dchain",
            "label": "amount",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 917,
            "contract": "contracts/Dchain.sol:Dchain",
            "label": "shipmentType",
            "offset": 0,
            "slot": "8",
            "type": "t_enum(ShipmentType)935"
          },
          {
            "astId": 919,
            "contract": "contracts/Dchain.sol:Dchain",
            "label": "data",
            "offset": 0,
            "slot": "9",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "320"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
